/**
 * JDBCPersistence framework for java
 *   Copyright (C) 2004-2014 Alex Rojkov
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *    You can contact me by email jdbcpersistence   a t   gmail    d o t    com
 * */
package org.jdbcpersistence;

import javax.sql.DataSource;
import java.sql.SQLException;
import java.util.Properties;

/**
 * <code>JDBCPersistence</code> is used to provide persistence services to an
 * application. An application will typically create one instance of
 * JDBCPersistence for each database it uses. Before an instance of
 * <code>JDBCPersistence</code> can be used it needs to be inialized. During
 * initialization, an instance is configured to connect to a particular
 * database, and map entities to tables.
 * <p/>
 * Examples below show how to initialize an instance to connect to database.
 * <p/>
 * Example - 1.1 initializing with <code>Properties</code>:
 * <pre>
 * <code>
 *    Properties p = new Properties();
 *    p.setProperty(Persistence.PROP_USER, "TEST");
 *    p.setProperty(Persistence.PROP_PASSWORD, "TEST");
 *    p.setProperty(Persistence.PROP_URL, "jdbc:oracle:thin:@localhost:1521:orcl");
 *    p.setProperty(Persistence.PROP_DRIVER, "oracle.jdbc.OracleDriver");
 *    final Persistence jdbcPersistence = PersistenceFactory.getInstance().newJdbcPersistence();
 *    jdbcPersistence.init(null, p);
 * </code>
 * </pre>
 * Example - 1.2 initializing with <code>DataSource</code>:
 * <p/>
 * <pre>
 * <code>
 *    InitialContext ic = new InitialContext();
 *    DataSource ds = (DataSource) ic.lookup(java:/comp/env/jdbc/ds);
 *    Persistence jdbcp = PersistenceFactory.getInstance().newJdbcPersistence();
 *    jdbcp.init(ds, null);
 *    Connection conn = jdbcp.getConnection();
 *    System.out.println(conn);
 *    conn.close();
 * </code>
 * </pre>
 * <p/>
 * Example - 1.3 initializing with <code>DataSource</code> and
 * <code>Properties<code>:
 * <pre>
 * <code>
 *     InitialContext ic = new InitialContext();
 *     DataSource ds = (DataSource) ic.lookup(java:/comp/env/jdbc/ds);
 *     Properties p = new Properties();
 *     Persistence jdbcp = PersistenceFactory.getInstance().newJdbcPersistence();
 *     jdbcp.init(ds, p);
 *     Connection conn = jdbcp.getConnection();
 *     System.out.println(conn);
 *     conn.close();
 * </code>
 * </pre>
 * <p/>
 * Mapping entities to tables is achieved with a call to <code>Persistence.registerPersistent<code>
 * method. Examples below show how to register a persistent entities Example - 2.1
 * registering persistent entities to a V_USERS view
 * <pre>
 * <code>
 *    MappedClass jdbcMap = jdbcp.registerPersistent(UserBean.class, null);
 * </code>
 * </pre>
 * JDBCPersistence allows you to provide custom implementation of
 * <code>JDBCPersistence</code> inteface. Complete or partial implementation can
 * be provided. Partial implementation will only provide those methods that
 * require custom code. For example, when delete operation needs to be
 * customized an abstract class with implementation of <code>Persistor.delete</code>
 * method can be provided. The remaining methods will be generated by the
 * framework.
 * <p/>
 * Example 2.2 - 1 registering persistent entities to a V_USERS view and supplying a
 * custom persistor
 * <pre>
 * <code>
 *    MappedClass jdbcMap = jdbcp.registerPersistent(UserBean.class, "V_USERS",
 * UserBeanPersistor.class);
 * </code>
 * </pre>
 * In example 2.2 class <code>UserBeanPersistor</code> implements
 * <code>org.jdbcpersistence.Persistor</code> interface providing complete
 * or incomplete implementation. When the implementation is incomplete, e.g.
 * only methods that require custom persistent logic are provided,
 * <code>Persistence</code> will provide the remaining methods.
 * <p/>
 * An instance of <code>Persistence</code> is thread safe.
 *
 * @author Alex Rojkov Date: 21-Jul-2005 Time: 10:20:35 PM
 * @see MappedClass
 * @see PersistenceFactory#newJdbcPersistence()
 * @see Persistor
 */
public interface Persistence
{
  /**
   * Property used to specify size of connection pool. Use with CREATE_DRIVER
   * acquire strategy.
   */
  public static final String POOL_SIZE = "javax.persistence.jdbc.pool.size";
  /**
   * Property used to specify database url. Use with CREATE_DRIVER acquire
   * strategy.
   */
  public static final String URL = "javax.persistence.jdbc.url";
  /**
   * Property used to specify JDBC Driver class. Use with CREATE_DRIVER acquire
   * strategy.
   */
  public static final String DRIVER = "javax.persistence.jdbc.driver";

  /**
   * Property used to specify user
   */
  public static final String USER = "javax.persistence.jdbc.user";

  /**
   * Property used to specify password
   */
  public static final String PASSWORD = "javax.persistence.jdbc.password";

  /**
   * Property name used to specify JNDI name
   */
  public static final String JNDI_NAME = "javax.persistence.jdbc.jndi-name";

  /**
   * Method init initializes an instance if JDBCPersistence. The method accepts
   * an instance of <code>DataSource</code> object and an instance of
   * <code>Properties</code>. When the <code>dataSource</code> parameter is null
   * <code>properties</code> are used to obtain a dataSource. It is required to
   * specify at least one argument. An exception is thrown when both parameters
   * are null.
   *
   * @param dataSource <code>Datasource</code> object that can be used to obtain
   *                   connection to the underlying database
   * @param properties <code>Properties</code> object that contains the
   *                   properties required to make conn to an underlying database
   */
  void init(DataSource dataSource, Properties properties)
    throws SQLException;

  /**
   * Method register register a class to be persisted by the
   * framework.
   *
   * @param entityClass class to be persisted by the framework. This parameter must
   *                    have value. The value can be a concrete class, an interface or an abstract
   *                    class. If the <code>clazz</code> parameter is an interface or an abstract
   *                    class the framework will generateResultSetReader implementation for the
   *                    <code>clazz</code>. This method requires the <code>clazz</code> be
   *                    annotated with <code>@Entity</code>
   * @return an instance of MappedClass that describes relationship between class's
   * fields and table's columns
   * @see MappedClass
   * @see Persistor
   * @see #newInstance(Class)
   * @see #getImplementation(Class)
   */
  public <T> MappedClass<T> register(Class<T> entityClass);

  /**
   * Returns a <code>Connection</code> object.
   *
   * @return <code>Connection</code> object
   * @see Connection
   */
  public Connection getConnection()
    throws SQLException;

  /**
   * Returns a new instance of a class regitered with JDBCPersistence. The
   * <code>clazz</code> can be an interface, abstract class or a concrete class.
   * If the <code>clazz</code> is an interface or an abstract class the
   * framework will generateResultSetReader implementation and return a new
   * instance of the generated implementation
   *
   * @param clazz class of the object to be created
   * @return an instance of <code>clazz</code>
   * @see #register
   */
  <T> T newInstance(Class<T> clazz);

  /**
   * Returns a byte array that contains class definition of an implementation of
   * a class <code>clazz</code> registered with JDBCPersistence when the
   * <code>clazz</code> is an interface or an abstract class or null when
   * <code>clazz</code> is a concrete class.
   *
   * @param entityClass
   * @return
   * @see #register
   */
  byte[] getImplementation(Class entityClass);

  void close() throws SQLException;
}
