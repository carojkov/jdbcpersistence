/**
 * JDBCPersistence framework for java
 *   Copyright (C) 2004-2014 Alex Rojkov
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *    You can contact me by email jdbcpersistence   a t   gmail    d o t    com
 * */
package org.jdbcpersistence;

import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.SQLException;

/**
 * The interface defines a contract that custom persistors must implement. <BR>
 * A custom persistor shall be required when the framework can not
 * generateResultSetReader a persistor for a particular driver / database
 * combination. For example: a custom persistor would be required if a entities is
 * mapped to an XMLType table in XDB, or other such circumstances.
 * <p/>
 * Complete or partial implementation can be provided. Partial implementation
 * will only provide those methods that require custom code. For example, when
 * delete operation needs to be customized an abstract class with implementation
 * of <code>JDBCPersistor.delete</code> method can be provided. The remaining
 * methods will be generated by the framework.
 *
 * @author Alex Rojkov Date: 21-Jul-2005 Time: 10:32:20 PM
 * @see Persistence#register(Class
 */
public interface Persistor<T>
{
  /**
   * Inserts an object's relational representation in the database using the
   * supplied conn object.
   *
   * @param conn   conn to the database
   * @param object object to be inserted
   * @throws SQLException any <code>SQLException</code> that should occur
   *                      during the insert propogates up the call chain
   */
  int insert(Connection conn, T object)
    throws SQLException;

  /**
   * Inserts a batch of <code>Object</code>s into database. Uses batch
   * functionality provided by <code>java.sql.PreparedStatement</code>.
   *
   * @param batch array of <code>Object</code>s to insert
   * @return an array of update counts containing one element for each object
   * in the batch. The elements of the array are ordered according to
   * the order in which objects appeared in the batch.
   * @throws SQLException                  any <code>SQLException</code> that should occur
   *                                       during the insert propogates up the call chain
   * @throws java.sql.BatchUpdateException any <code>BatchUpdateException</code>
   *                                       that should occur during the insert propogates up the call chain
   * @see java.sql.PreparedStatement#executeBatch()
   */

  int[] insert(Connection conn, T[] batch)
    throws SQLException, BatchUpdateException;

  /**
   * Updates an object's representation in the database using the supplied
   * conn object.
   *
   * @param conn   conn to the database
   * @param object object, representation of which, is to be updated
   * @throws SQLException any <code>SQLException</code> that should occur
   *                      during the insert propogates up the call chain
   */
  int update(Connection conn, T object)
    throws SQLException;

  /**
   * Updates a batch of <code>Object</code>s in database. Uses batch
   * functionality provided by <code>java.sql.PreparedStatement</code>.
   *
   * @param batch array of <code>Object</code>s to update
   * @return an array of update counts containing one element for each object
   * in the batch. The elements of the array are ordered according to
   * the order in which objects appeared in the batch.
   * @throws SQLException         any <code>SQLException</code> that should occur
   *                              during the insert propogates up the call chain
   * @throws BatchUpdateException any <code>BatchUpdateException</code> that
   *                              should occur during the insert propogates up the call chain
   * @see java.sql.PreparedStatement#executeBatch()
   */
  int[] update(Connection conn, T[] batch)
    throws SQLException, BatchUpdateException;

  /**
   * Deletes an object's representation in the database using the supplied
   * conn object.
   *
   * @param conn   conn to the database
   * @param object an object, representation of which, is to be deleted
   * @throws SQLException any <code>SQLException</code> that should occur
   *                      during the insert propogates up the call chain
   */
  int delete(Connection conn, T object)
    throws SQLException;

  /**
   * Deletes a batch of <code>Object</code>s from database. Uses batch
   * functionality provided by <code>java.sql.PreparedStatement</code>.
   *
   * @param batch array of <code>Object</code>s to delete
   * @return an array of update counts containing one element for each object
   * in the batch. The elements of the array are ordered according to
   * the order in which objects appeared in the batch.
   * @throws SQLException         any <code>SQLException</code> that should occur
   *                              during the insert propogates up the call chain
   * @throws BatchUpdateException any <code>BatchUpdateException</code> that
   *                              should occur during the insert propogates up the call chain
   * @see java.sql.PreparedStatement#executeBatch()
   */
  int[] delete(Connection conn, T[] batch)
    throws SQLException, BatchUpdateException;

  /**
   * Loads object's representation from the database using the supplied conn
   * object, creates an instance of mapped object, sets it's fields and return
   * the instance of mapped object.
   *
   * @param conn       conn to the database
   * @param primaryKey array of objects where each object represents a column
   *                   of a primary key in the order of columns in primary key
   * @return an instance of mapped entities with all the fields initialized with
   * the values read from the database or null if no such object was
   * found
   * @throws SQLException any <code>SQLException</code> that should occur
   *                      during the insert propogates up the call chain
   */
  T load(Connection conn, Object[] primaryKey)
    throws SQLException;
}
